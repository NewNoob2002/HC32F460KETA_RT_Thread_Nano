<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HC32F460.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HC32F460.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Apr 27 17:43:06 2025
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9a]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">IRQ128_Handler</a><BR>
 <LI><a href="#[b7]">__cxa_pure_virtual</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">__cxa_pure_virtual</a><BR>
 <LI><a href="#[b6]">rt_thread_idle_entry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">rt_thread_idle_entry</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">BusFault_Handler</a> from hc32f460_interrupts.o(.text.BusFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from hc32f460_interrupts.o(.text.DebugMon_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">IRQ000_Handler</a> from hc32f460_interrupts.o(.text.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">IRQ001_Handler</a> from hc32f460_interrupts.o(.text.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ002_Handler</a> from hc32f460_interrupts.o(.text.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ003_Handler</a> from hc32f460_interrupts.o(.text.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ004_Handler</a> from hc32f460_interrupts.o(.text.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ005_Handler</a> from hc32f460_interrupts.o(.text.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ006_Handler</a> from hc32f460_interrupts.o(.text.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ007_Handler</a> from hc32f460_interrupts.o(.text.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ008_Handler</a> from hc32f460_interrupts.o(.text.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ009_Handler</a> from hc32f460_interrupts.o(.text.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ010_Handler</a> from hc32f460_interrupts.o(.text.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ011_Handler</a> from hc32f460_interrupts.o(.text.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ012_Handler</a> from hc32f460_interrupts.o(.text.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ013_Handler</a> from hc32f460_interrupts.o(.text.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ014_Handler</a> from hc32f460_interrupts.o(.text.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ015_Handler</a> from hc32f460_interrupts.o(.text.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ016_Handler</a> from hc32f460_interrupts.o(.text.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ017_Handler</a> from hc32f460_interrupts.o(.text.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ018_Handler</a> from hc32f460_interrupts.o(.text.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ019_Handler</a> from hc32f460_interrupts.o(.text.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ020_Handler</a> from hc32f460_interrupts.o(.text.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ021_Handler</a> from hc32f460_interrupts.o(.text.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ022_Handler</a> from hc32f460_interrupts.o(.text.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ023_Handler</a> from hc32f460_interrupts.o(.text.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ024_Handler</a> from hc32f460_interrupts.o(.text.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ025_Handler</a> from hc32f460_interrupts.o(.text.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ026_Handler</a> from hc32f460_interrupts.o(.text.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ027_Handler</a> from hc32f460_interrupts.o(.text.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ028_Handler</a> from hc32f460_interrupts.o(.text.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ029_Handler</a> from hc32f460_interrupts.o(.text.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ030_Handler</a> from hc32f460_interrupts.o(.text.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ031_Handler</a> from hc32f460_interrupts.o(.text.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ032_Handler</a> from hc32f460_interrupts.o(.text.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ033_Handler</a> from hc32f460_interrupts.o(.text.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ034_Handler</a> from hc32f460_interrupts.o(.text.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ035_Handler</a> from hc32f460_interrupts.o(.text.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ036_Handler</a> from hc32f460_interrupts.o(.text.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ037_Handler</a> from hc32f460_interrupts.o(.text.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ038_Handler</a> from hc32f460_interrupts.o(.text.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ039_Handler</a> from hc32f460_interrupts.o(.text.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ040_Handler</a> from hc32f460_interrupts.o(.text.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ041_Handler</a> from hc32f460_interrupts.o(.text.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ042_Handler</a> from hc32f460_interrupts.o(.text.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ043_Handler</a> from hc32f460_interrupts.o(.text.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ044_Handler</a> from hc32f460_interrupts.o(.text.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ045_Handler</a> from hc32f460_interrupts.o(.text.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ046_Handler</a> from hc32f460_interrupts.o(.text.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ047_Handler</a> from hc32f460_interrupts.o(.text.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ048_Handler</a> from hc32f460_interrupts.o(.text.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ049_Handler</a> from hc32f460_interrupts.o(.text.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ050_Handler</a> from hc32f460_interrupts.o(.text.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ051_Handler</a> from hc32f460_interrupts.o(.text.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ052_Handler</a> from hc32f460_interrupts.o(.text.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ053_Handler</a> from hc32f460_interrupts.o(.text.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ054_Handler</a> from hc32f460_interrupts.o(.text.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ055_Handler</a> from hc32f460_interrupts.o(.text.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ056_Handler</a> from hc32f460_interrupts.o(.text.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ057_Handler</a> from hc32f460_interrupts.o(.text.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ058_Handler</a> from hc32f460_interrupts.o(.text.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ059_Handler</a> from hc32f460_interrupts.o(.text.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ060_Handler</a> from hc32f460_interrupts.o(.text.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ061_Handler</a> from hc32f460_interrupts.o(.text.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ062_Handler</a> from hc32f460_interrupts.o(.text.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ063_Handler</a> from hc32f460_interrupts.o(.text.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ064_Handler</a> from hc32f460_interrupts.o(.text.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ065_Handler</a> from hc32f460_interrupts.o(.text.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ066_Handler</a> from hc32f460_interrupts.o(.text.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ067_Handler</a> from hc32f460_interrupts.o(.text.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ068_Handler</a> from hc32f460_interrupts.o(.text.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ069_Handler</a> from hc32f460_interrupts.o(.text.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ070_Handler</a> from hc32f460_interrupts.o(.text.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ071_Handler</a> from hc32f460_interrupts.o(.text.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ072_Handler</a> from hc32f460_interrupts.o(.text.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ073_Handler</a> from hc32f460_interrupts.o(.text.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ074_Handler</a> from hc32f460_interrupts.o(.text.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ075_Handler</a> from hc32f460_interrupts.o(.text.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ076_Handler</a> from hc32f460_interrupts.o(.text.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ077_Handler</a> from hc32f460_interrupts.o(.text.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ078_Handler</a> from hc32f460_interrupts.o(.text.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ079_Handler</a> from hc32f460_interrupts.o(.text.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ080_Handler</a> from hc32f460_interrupts.o(.text.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ081_Handler</a> from hc32f460_interrupts.o(.text.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ082_Handler</a> from hc32f460_interrupts.o(.text.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ083_Handler</a> from hc32f460_interrupts.o(.text.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ084_Handler</a> from hc32f460_interrupts.o(.text.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ085_Handler</a> from hc32f460_interrupts.o(.text.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ086_Handler</a> from hc32f460_interrupts.o(.text.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ087_Handler</a> from hc32f460_interrupts.o(.text.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ088_Handler</a> from hc32f460_interrupts.o(.text.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ089_Handler</a> from hc32f460_interrupts.o(.text.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ090_Handler</a> from hc32f460_interrupts.o(.text.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ091_Handler</a> from hc32f460_interrupts.o(.text.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ092_Handler</a> from hc32f460_interrupts.o(.text.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ093_Handler</a> from hc32f460_interrupts.o(.text.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ094_Handler</a> from hc32f460_interrupts.o(.text.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ095_Handler</a> from hc32f460_interrupts.o(.text.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ096_Handler</a> from hc32f460_interrupts.o(.text.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ097_Handler</a> from hc32f460_interrupts.o(.text.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ098_Handler</a> from hc32f460_interrupts.o(.text.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ099_Handler</a> from hc32f460_interrupts.o(.text.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ100_Handler</a> from hc32f460_interrupts.o(.text.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ101_Handler</a> from hc32f460_interrupts.o(.text.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ102_Handler</a> from hc32f460_interrupts.o(.text.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ103_Handler</a> from hc32f460_interrupts.o(.text.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ104_Handler</a> from hc32f460_interrupts.o(.text.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ105_Handler</a> from hc32f460_interrupts.o(.text.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ106_Handler</a> from hc32f460_interrupts.o(.text.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ107_Handler</a> from hc32f460_interrupts.o(.text.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ108_Handler</a> from hc32f460_interrupts.o(.text.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ109_Handler</a> from hc32f460_interrupts.o(.text.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ110_Handler</a> from hc32f460_interrupts.o(.text.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ111_Handler</a> from hc32f460_interrupts.o(.text.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ112_Handler</a> from hc32f460_interrupts.o(.text.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ113_Handler</a> from hc32f460_interrupts.o(.text.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ114_Handler</a> from hc32f460_interrupts.o(.text.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ115_Handler</a> from hc32f460_interrupts.o(.text.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ116_Handler</a> from hc32f460_interrupts.o(.text.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ117_Handler</a> from hc32f460_interrupts.o(.text.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ118_Handler</a> from hc32f460_interrupts.o(.text.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ119_Handler</a> from hc32f460_interrupts.o(.text.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ120_Handler</a> from hc32f460_interrupts.o(.text.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ121_Handler</a> from hc32f460_interrupts.o(.text.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ122_Handler</a> from hc32f460_interrupts.o(.text.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ123_Handler</a> from hc32f460_interrupts.o(.text.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ124_Handler</a> from hc32f460_interrupts.o(.text.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ125_Handler</a> from hc32f460_interrupts.o(.text.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ126_Handler</a> from hc32f460_interrupts.o(.text.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ127_Handler</a> from hc32f460_interrupts.o(.text.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9a]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9c]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9d]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9e]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9f]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a0]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a1]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a2]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a3]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a4]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a5]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a6]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a7]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a8]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a9]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from hc32f460_interrupts.o(.text.MemManage_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from hc32f460_interrupts.o(.text.NMI_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from hc32f460_interrupts.o(.text.SVC_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[aa]">SystemInit</a> from system_hc32f460.o(.text.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[15]">UsageFault_Handler</a> from hc32f460_interrupts.o(.text.UsageFault_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[cb]">_GLOBAL__sub_I_Begin.cpp</a> from begin.o(.text._GLOBAL__sub_I_Begin.cpp) referenced from begin.o(.init_array)
 <LI><a href="#[cd]">_GLOBAL__sub_I_IPAddress.cpp</a> from ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp) referenced from ipaddress.o(.init_array)
 <LI><a href="#[ca]">_GLOBAL__sub_I_Key.cpp</a> from key.o(.text._GLOBAL__sub_I_Key.cpp) referenced from key.o(.init_array)
 <LI><a href="#[cc]">_GLOBAL__sub_I_Usart.cpp</a> from usart_1.o(.text._GLOBAL__sub_I_Usart.cpp) referenced from usart_1.o(.init_array)
 <LI><a href="#[ac]">I2C_EEI_Callback()</a> from main.o(.text._Z16I2C_EEI_Callbackv) referenced 2 times from main.o(.text._ZL16Slave_Initializev)
 <LI><a href="#[ad]">I2C_RXI_Callback()</a> from main.o(.text._Z16I2C_RXI_Callbackv) referenced 2 times from main.o(.text._ZL16Slave_Initializev)
 <LI><a href="#[ae]">I2C_TEI_Callback()</a> from main.o(.text._Z16I2C_TEI_Callbackv) referenced 2 times from main.o(.text._ZL16Slave_Initializev)
 <LI><a href="#[b4]">i2c_slave_task(void*)</a> from main.o(.text._ZL14i2c_slave_taskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[b3]">led_thread_entry(void*)</a> from main.o(.text._ZL16led_thread_entryPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[1]">void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[5]">void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[9]">void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[d]">void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[3]">void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[7]">void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[b]">void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[f]">void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[2]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[6]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[a]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[e]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[0]">void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[4]">void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[8]">void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[c]">void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[af]">HardwareI2C::~HardwareI2C()</a> from hardwarei2c.o(.text._ZN11HardwareI2CD2Ev) referenced 2 times from begin.o(.text.__cxx_global_var_init)
 <LI><a href="#[b9]">Print::availableForWrite()</a> from usart_1.o(.text._ZN5Print17availableForWriteEv) referenced from usart_1.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b9]">Print::availableForWrite()</a> from usart_1.o(.text._ZN5Print17availableForWriteEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b9]">Print::availableForWrite()</a> from usart_1.o(.text._ZN5Print17availableForWriteEv) referenced from usart_1.o(.rodata._ZTV6Stream)
 <LI><a href="#[ba]">Print::flush()</a> from print.o(.text._ZN5Print5flushEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b8]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from usart_1.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b8]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b8]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[b8]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from usart_1.o(.rodata._ZTV6Stream)
 <LI><a href="#[bc]">Usart::availableForWrite()</a> from usart_1.o(.text._ZN5Usart17availableForWriteEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[c3]">Usart::end()</a> from usart_1.o(.text._ZN5Usart3endEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[c0]">Usart::peek()</a> from usart_1.o(.text._ZN5Usart4peekEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[bf]">Usart::read()</a> from usart_1.o(.text._ZN5Usart4readEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[c1]">Usart::begin(unsigned int)</a> from usart_1.o(.text._ZN5Usart5beginEj) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[c2]">Usart::begin(unsigned int, unsigned short)</a> from usart_1.o(.text._ZN5Usart5beginEjt) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[bd]">Usart::flush()</a> from usart_1.o(.text._ZN5Usart5flushEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[bb]">Usart::write(unsigned char)</a> from usart_1.o(.text._ZN5Usart5writeEh) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[be]">Usart::available()</a> from usart_1.o(.text._ZN5Usart9availableEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[b0]">Usart::~Usart__sub_object()</a> from usart_1.o(.text._ZN5UsartD2Ev) referenced 2 times from usart_1.o(.text.__cxx_global_var_init)
 <LI><a href="#[b0]">Usart::~Usart__sub_object()</a> from usart_1.o(.text._ZN5UsartD2Ev) referenced 2 times from usart_1.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[b0]">Usart::~Usart__sub_object()</a> from usart_1.o(.text._ZN5UsartD2Ev) referenced 2 times from usart_1.o(.text.__cxx_global_var_init.2)
 <LI><a href="#[c4]">Usart::operator bool()</a> from usart_1.o(.text._ZN5UsartcvbEv) referenced from usart_1.o(.rodata._ZTV5Usart)
 <LI><a href="#[c5]">IPAddress::printTo(Print&) const</a> from ipaddress.o(.text._ZNK9IPAddress7printToER5Print) referenced from ipaddress.o(.rodata._ZTV9IPAddress)
 <LI><a href="#[b7]">__cxa_pure_virtual</a> from abi.o(.text.__cxa_pure_virtual) referenced 9 times from usart_1.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b7]">__cxa_pure_virtual</a> from abi.o(.text.__cxa_pure_virtual) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b7]">__cxa_pure_virtual</a> from abi.o(.text.__cxa_pure_virtual) referenced 5 times from usart_1.o(.rodata._ZTV6Stream)
 <LI><a href="#[b7]">__cxa_pure_virtual</a> from abi.o(.text.__cxa_pure_virtual) referenced from ipaddress.o(.rodata._ZTV9Printable)
 <LI><a href="#[ab]">__main</a> from __main.o(!!!main) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[b5]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[b1]">rt_thread_exit</a> from thread.o(.text.rt_thread_exit) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[b6]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[b2]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[c8]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[c7]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[c9]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[c6]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d1]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1fc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1fd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1fe]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1ff]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[200]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[dc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d4]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[201]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[202]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[203]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[204]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[205]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[206]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[207]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[208]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[209]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[210]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[211]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[212]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[213]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[214]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[215]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[216]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[21a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[21b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d0]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[21c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[21d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[dd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[21f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a0]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[1a1]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[1da]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1d9]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[220]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[e8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[221]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[181]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(char const*)
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>

<P><STRONG><a name="[222]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[226]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[e6]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[229]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ef]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d5]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f1]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[22d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[22e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[ee]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[230]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[f0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[231]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[df]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[f8]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f9]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[de]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fb]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, hc32f460_adc.o(.text.ADC_AddAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_AddAdcChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[fd]"></a>ADC_DelAdcChannel</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hc32f460_adc.o(.text.ADC_DelAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DelAdcChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
</UL>

<P><STRONG><a name="[fe]"></a>ADC_Init</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, hc32f460_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[ff]"></a>ADC_TriggerSrcCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hc32f460_adc.o(.text.ADC_TriggerSrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TriggerSrcCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>CLK_GetClockFreq</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hc32f460_clk.o(.text.CLK_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTick_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_clock_frequencies()
</UL>

<P><STRONG><a name="[100]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hc32f460_clk.o(.text.CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[101]"></a>CLK_MpllCmd</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, hc32f460_clk.o(.text.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_MpllCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[102]"></a>CLK_MpllConfig</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, hc32f460_clk.o(.text.CLK_MpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_MpllConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[103]"></a>CLK_SetPllSource</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hc32f460_clk.o(.text.CLK_SetPllSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SetPllSource
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[104]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, hc32f460_clk.o(.text.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetSysClkSource
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[106]"></a>CLK_SysClkConfig</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, hc32f460_clk.o(.text.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[107]"></a>CLK_XtalCmd</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, hc32f460_clk.o(.text.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_XtalCmd &rArr; CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[129]"></a>CLK_XtalConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hc32f460_clk.o(.text.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[fc]"></a>Ddl_AssertHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl_assert.o(.text.Ddl_AssertHandler))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Toggle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveAdr0Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TriggerSrcCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelAdcChannel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
</UL>

<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>DebugUsartInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usart.o(.text.DebugUsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DebugUsartInit &rArr; USART_SetBaudrate &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>

<P><STRONG><a name="[12b]"></a>EFM_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32f460_efm.o(.text.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[10e]"></a>EFM_SetLatency</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32f460_efm.o(.text.EFM_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[12a]"></a>EFM_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f460_efm.o(.text.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
</UL>

<P><STRONG><a name="[10f]"></a>GPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, winterrupts.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[112]"></a>GPIO_SetFunc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart_1.o(.text.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetFunc &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[113]"></a>I2C_BaudrateConfig</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_BaudrateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_BaudrateConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[114]"></a>I2C_ClearStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
</UL>

<P><STRONG><a name="[115]"></a>I2C_Cmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::~HardwareI2C()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Receive_IT(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[116]"></a>I2C_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hc32f460_i2c.o(.text.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[117]"></a>I2C_GetStatus</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TEI_Callback()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RXI_Callback()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
</UL>

<P><STRONG><a name="[118]"></a>I2C_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Init &rArr; I2C_BaudrateConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[119]"></a>I2C_IntCmd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Receive_IT(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[11a]"></a>I2C_ReadData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hc32f460_i2c.o(.text.I2C_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RXI_Callback()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
</UL>

<P><STRONG><a name="[11b]"></a>I2C_SlaveAdr0Config</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, hc32f460_i2c.o(.text.I2C_SlaveAdr0Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SlaveAdr0Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[11c]"></a>I2C_WriteData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hc32f460_i2c.o(.text.I2C_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TEI_Callback()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
</UL>

<P><STRONG><a name="[1a]"></a>IRQ000_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ001_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ002_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ003_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ004_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ005_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ006_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ007_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ008_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ009_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ010_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ011_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ012_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ013_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ014_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ015_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ016_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ017_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ018_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ019_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ020_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ021_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ022_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ023_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ024_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ025_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ026_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ027_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ028_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ029_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ030_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ031_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ032_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ033_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ034_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ035_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ036_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ037_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ038_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ039_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ040_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ041_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ042_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ043_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ044_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ045_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ046_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ047_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ048_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ049_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ050_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ051_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ052_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ053_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ054_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ055_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ056_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ057_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ058_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ059_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ060_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ061_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ062_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ063_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ064_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ065_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ066_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ067_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ068_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ069_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ070_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ071_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ072_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ073_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ074_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ075_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ076_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ077_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ078_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ079_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ080_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ081_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ082_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ083_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ084_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ085_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ086_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ087_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ088_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ089_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ090_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ091_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ092_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ093_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ094_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ095_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ096_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ097_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ098_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ099_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ100_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ101_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ102_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ103_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ104_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ105_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ106_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ107_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ108_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ109_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ110_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ111_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ112_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ113_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ114_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ115_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ116_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ117_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ118_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ119_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ120_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ121_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ122_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ123_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ124_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ125_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ126_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ127_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>PORT_Init</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, hc32f460_gpio.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[11e]"></a>PORT_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f460_gpio.o(.text.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>

<P><STRONG><a name="[10a]"></a>PORT_SetFunc</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, hc32f460_gpio.o(.text.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::configPins()
</UL>

<P><STRONG><a name="[11f]"></a>PORT_Toggle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hc32f460_gpio.o(.text.PORT_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry(void*)
</UL>

<P><STRONG><a name="[11d]"></a>PORT_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f460_gpio.o(.text.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>

<P><STRONG><a name="[120]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32f460_pwc.o(.text.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[109]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32f460_pwc.o(.text.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::HardwareI2C(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[121]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32f460_pwc.o(.text.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[122]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f460_pwc.o(.text.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[1a8]"></a>RMU_ClrResetFlag</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hc32f460_rmu.o(.text.RMU_ClrResetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMU_ClrResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_resetCause
</UL>

<P><STRONG><a name="[1a7]"></a>RMU_GetResetCause</STRONG> (Thumb, 188 bytes, Stack size 4 bytes, hc32f460_rmu.o(.text.RMU_GetResetCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RMU_GetResetCause
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_resetCause
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>SetClkSyncBaudrate</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, hc32f460_usart.o(.text.SetClkSyncBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetClkSyncBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[126]"></a>SetScBaudrate</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, hc32f460_usart.o(.text.SetScBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetScBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[127]"></a>SetUartBaudrate</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, hc32f460_usart.o(.text.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, system_hc32f460.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[aa]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_hc32f460.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>TIMERA_BaseInit</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, hc32f460_timera.o(.text.TIMERA_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMERA_BaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[132]"></a>TIMERA_Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32f460_timera.o(.text.TIMERA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMERA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[133]"></a>TIMERA_CompareCmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hc32f460_timera.o(.text.TIMERA_CompareCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMERA_CompareCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)
</UL>

<P><STRONG><a name="[134]"></a>TIMERA_CompareInit</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, hc32f460_timera.o(.text.TIMERA_CompareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMERA_CompareInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)
</UL>

<P><STRONG><a name="[162]"></a>USART_ClearStatus</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, hc32f460_usart.o(.text.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>USART_DeInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, hc32f460_usart.o(.text.USART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
</UL>

<P><STRONG><a name="[10d]"></a>USART_FuncCmd</STRONG> (Thumb, 438 bytes, Stack size 4 bytes, hc32f460_usart.o(.text.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::write(unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
</UL>

<P><STRONG><a name="[135]"></a>USART_GetStatus</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32f460_usart.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>

<P><STRONG><a name="[136]"></a>USART_RecData</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hc32f460_usart.o(.text.USART_RecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_RecData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>

<P><STRONG><a name="[137]"></a>USART_SendData</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hc32f460_usart.o(.text.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>

<P><STRONG><a name="[10c]"></a>USART_SetBaudrate</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hc32f460_usart.o(.text.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_SetBaudrate &rArr; SetUartBaudrate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
</UL>

<P><STRONG><a name="[10b]"></a>USART_UART_Init</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, hc32f460_usart.o(.text.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
</UL>

<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f460_interrupts.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>adc_adc_init(adc_device_t const*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adc.o(.text._Z12adc_adc_initPK12adc_device_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_adc_init(adc_device_t const*) &rArr; PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TriggerSrcCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
</UL>

<P><STRONG><a name="[ac]"></a>I2C_EEI_Callback()</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, main.o(.text._Z16I2C_EEI_Callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_EEI_Callback() &rArr; I2C_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufRead()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZL16Slave_Initializev)
</UL>
<P><STRONG><a name="[ad]"></a>I2C_RXI_Callback()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text._Z16I2C_RXI_Callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_RXI_Callback() &rArr; I2C_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufWrite(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZL16Slave_Initializev)
</UL>
<P><STRONG><a name="[ae]"></a>I2C_TEI_Callback()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text._Z16I2C_TEI_Callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_TEI_Callback() &rArr; I2C_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufRead()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZL16Slave_Initializev)
</UL>
<P><STRONG><a name="[143]"></a>timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, wiring_digital.o(.text._Z16timera_pwm_startP15timera_config_tjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_get_base_clock()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_n_to_clk_div(unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[149]"></a>usart_irq_resign(usart_interrupt_config_t&, char const*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_1.o(.text._Z16usart_irq_resignR24usart_interrupt_config_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = usart_irq_resign(usart_interrupt_config_t&, char const*) &rArr; irqn_aa_resign &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_resign
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqResign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
</UL>

<P><STRONG><a name="[14f]"></a>irqn_bitfield_get(unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, irqn.o(.text._Z17irqn_bitfield_getj))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_next(unsigned int&)
</UL>

<P><STRONG><a name="[191]"></a>irqn_bitfield_set(unsigned int, bool)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irqn.o(.text._Z17irqn_bitfield_setjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_resign
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[14e]"></a>irqn_bitfield_next(unsigned int&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, irqn.o(.text._Z18irqn_bitfield_nextRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = irqn_bitfield_next(unsigned int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_get(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[150]"></a>usart_irq_register(usart_interrupt_config_t&, char const*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usart_1.o(.text._Z18usart_irq_registerR24usart_interrupt_config_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = usart_irq_register(usart_interrupt_config_t&, char const*) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
</UL>

<P><STRONG><a name="[1a4]"></a>adc_channel_to_mask(adc_device_t const*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text._Z19adc_channel_to_maskPK12adc_device_th))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
</UL>

<P><STRONG><a name="[146]"></a>timera_n_to_clk_div(unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, wiring_digital.o(.text._Z19timera_n_to_clk_divt))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[155]"></a>timera_get_assignment(short, timera_config_t*&, en_timera_channel&, en_port_func&)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wiring_analog.o(.text._Z21timera_get_assignmentsRP15timera_config_tR17en_timera_channelR12en_port_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = timera_get_assignment(short, timera_config_t*&, en_timera_channel&, en_port_func&) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[144]"></a>timera_get_base_clock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wiring_digital.o(.text._Z21timera_get_base_clockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timera_get_base_clock() &rArr; update_system_clock_frequencies() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_clock_frequencies()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[194]"></a>irqn_to_bitfield_index(IRQn)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqn.o(.text._Z22irqn_to_bitfield_index4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_resign
</UL>

<P><STRONG><a name="[157]"></a>timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wiring_analog.o(.text._Z24timera_pwm_channel_startP15timera_config_t17en_timera_channelb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool) &rArr; timera_set_channel_active_flag(timera_config_t*, en_timera_channel, bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_set_channel_active_flag(timera_config_t*, en_timera_channel, bool)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[192]"></a>irqn_bitfield_index_to_irqn(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irqn.o(.text._Z27irqn_bitfield_index_to_irqnj))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[158]"></a>timera_set_channel_active_flag(timera_config_t*, en_timera_channel, bool)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wiring_analog.o(.text._Z30timera_set_channel_active_flagP15timera_config_t17en_timera_channelb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timera_set_channel_active_flag(timera_config_t*, en_timera_channel, bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)
</UL>

<P><STRONG><a name="[156]"></a>update_system_clock_frequencies()</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, sysclock.o(.text._Z31update_system_clock_frequenciesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_system_clock_frequencies() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_get_base_clock()
</UL>

<P><STRONG><a name="[16e]"></a>RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usart_1.o(.text._ZN10RingBufferIhE19_update_write_indexEj))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_push(unsigned char)
</UL>

<P><STRONG><a name="[165]"></a>RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_1.o(.text._ZN10RingBufferIhE3popERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::read()
</UL>

<P><STRONG><a name="[169]"></a>RingBuffer&lang;unsigned char&rang;::_pop()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_1.o(.text._ZN10RingBufferIhE4_popEv))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
</UL>

<P><STRONG><a name="[16a]"></a>RingBuffer&lang;unsigned char&rang;::peek()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart_1.o(.text._ZN10RingBufferIhE4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::peek() &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::peek()
</UL>

<P><STRONG><a name="[16b]"></a>RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usart_1.o(.text._ZN10RingBufferIhE4pushEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::write(unsigned char)
</UL>

<P><STRONG><a name="[167]"></a>RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usart_1.o(.text._ZN10RingBufferIhE4pushEhbRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_push(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)
</UL>

<P><STRONG><a name="[16d]"></a>RingBuffer&lang;unsigned char&rang;::_push(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_1.o(.text._ZN10RingBufferIhE5_pushEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::_push(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>

<P><STRONG><a name="[173]"></a>RingBuffer&lang;unsigned char&rang;::clear()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_1.o(.text._ZN10RingBufferIhE5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[16f]"></a>RingBuffer&lang;unsigned char&rang;::count()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_1.o(.text._ZN10RingBufferIhE5countEv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::available()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::availableForWrite()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
</UL>

<P><STRONG><a name="[16c]"></a>RingBuffer&lang;unsigned char&rang;::isFull()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_1.o(.text._ZN10RingBufferIhE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::capacity()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::write(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>

<P><STRONG><a name="[168]"></a>RingBuffer&lang;unsigned char&rang;::isEmpty()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_1.o(.text._ZN10RingBufferIhE7isEmptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::flush()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::peek()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
</UL>

<P><STRONG><a name="[170]"></a>RingBuffer&lang;unsigned char&rang;::capacity()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_1.o(.text._ZN10RingBufferIhE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::availableForWrite()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
</UL>

<P><STRONG><a name="[171]"></a>RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart_1.o(.text._ZN10RingBufferIhEC2Ej), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart(usart_config_t*, short, short, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[174]"></a>RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_1.o(.text._ZN10RingBufferIhED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::~Usart()
</UL>

<P><STRONG><a name="[176]"></a>HardwareI2C::configPins()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hardwarei2c.o(.text._ZN11HardwareI2C10configPinsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardwareI2C::configPins() &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortInstance(unsigned char)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI2CPinFunc(M4_I2C_TypeDef*, bool)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinIndex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::HardwareI2C(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)
</UL>

<P><STRONG><a name="[17a]"></a>HardwareI2C::HardwareI2C(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hardwarei2c.o(.text._ZN11HardwareI2CC2EP14M4_I2C_TypeDefhhhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardwareI2C::HardwareI2C(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int) &rArr; HardwareI2C::configPins() &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::configPins()
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[234]"></a>HardwareI2C::HardwareI2C__sub_object(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hardwarei2c.o(.text._ZN11HardwareI2CC2EP14M4_I2C_TypeDefhhhhj), UNUSED)

<P><STRONG><a name="[af]"></a>HardwareI2C::~HardwareI2C()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwarei2c.o(.text._ZN11HardwareI2CD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardwareI2C::~HardwareI2C() &rArr; I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> begin.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[235]"></a>HardwareI2C::~HardwareI2C__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwarei2c.o(.text._ZN11HardwareI2CD2Ev), UNUSED)

<P><STRONG><a name="[18b]"></a>EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, enhancedbutton.o(.text._ZN14EnhancedButtonC2Etttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[236]"></a>EnhancedButton::EnhancedButton__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, enhancedbutton.o(.text._ZN14EnhancedButtonC2Etttt), UNUSED)

<P><STRONG><a name="[17b]"></a>HardwareSerial::HardwareSerial__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_1.o(.text._ZN14HardwareSerialC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart(usart_config_t*, short, short, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[17d]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, print.o(.text._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>

<P><STRONG><a name="[b9]"></a>Print::availableForWrite()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_1.o(.text._ZN5Print17availableForWriteEv))
<BR>[Address Reference Count : 3]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> usart_1.o(.rodata._ZTV14HardwareSerial)
<LI> usart_1.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[ba]"></a>Print::flush()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print.o(.text._ZN5Print5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> print.o(.rodata._ZTV5Print)
</UL>
<P><STRONG><a name="[18a]"></a>Print::print(char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[17f]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[180]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[17e]"></a>Print::write(char const*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[b8]"></a>Print::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, print.o(.text._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(unsigned char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
<LI> print.o(.rodata._ZTV5Print)
<LI> usart_1.o(.rodata._ZTV14HardwareSerial)
<LI> usart_1.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[187]"></a>Print::Print__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_1.o(.text._ZN5PrintC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[bc]"></a>Usart::availableForWrite()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5Usart17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart::availableForWrite()
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::capacity()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[c3]"></a>Usart::end()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, usart_1.o(.text._ZN5Usart3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Usart::end() &rArr; usart_irq_resign(usart_interrupt_config_t&, char const*) &rArr; irqn_aa_resign &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_resign(usart_interrupt_config_t&, char const*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[c0]"></a>Usart::peek()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5Usart4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart::peek() &rArr; RingBuffer&lang;unsigned char&rang;::peek() &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::peek()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[bf]"></a>Usart::read()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart_1.o(.text._ZN5Usart4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usart::read() &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[c1]"></a>Usart::begin(unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5Usart5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart::begin(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[183]"></a>Usart::begin(unsigned int, stc_usart_uart_init const*, bool)</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, usart_1.o(.text._ZN5Usart5beginEjPK19stc_usart_uart_initb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Usart::begin(unsigned int, stc_usart_uart_init const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[c2]"></a>Usart::begin(unsigned int, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usart_1.o(.text._ZN5Usart5beginEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Usart::begin(unsigned int, unsigned short) &rArr; Usart::begin(unsigned int, stc_usart_uart_init const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[bd]"></a>Usart::flush()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5Usart5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart::flush() &rArr; yield
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[bb]"></a>Usart::write(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart_1.o(.text._ZN5Usart5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Usart::write(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[be]"></a>Usart::available()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5Usart9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart::available()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[185]"></a>Usart::Usart(usart_config_t*, short, short, unsigned int, unsigned int)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usart_1.o(.text._ZN5UsartC2EP14usart_config_tssjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial__sub_object()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[18c]"></a>Usart::Usart__sub_object(usart_config_t*, short, short, unsigned int, unsigned int)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usart_1.o(.text._ZN5UsartC2EP14usart_config_tssjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usart::Usart__sub_object(usart_config_t*, short, short, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[186]"></a>Usart::~Usart()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5UsartD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>

<P><STRONG><a name="[b0]"></a>Usart::~Usart__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart_1.o(.text._ZN5UsartD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart::~Usart__sub_object()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usart_1.o(.text.__cxx_global_var_init)
<LI> usart_1.o(.text.__cxx_global_var_init.1)
<LI> usart_1.o(.text.__cxx_global_var_init.2)
</UL>
<P><STRONG><a name="[c4]"></a>Usart::operator bool()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_1.o(.text._ZN5UsartcvbEv))
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.rodata._ZTV5Usart)
</UL>
<P><STRONG><a name="[17c]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart_1.o(.text._ZN6StreamC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial__sub_object()
</UL>

<P><STRONG><a name="[18e]"></a>Charger::Charger(HardwareI2C*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, charger.o(.text._ZN7ChargerC2EP11HardwareI2C))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[237]"></a>Charger::Charger__sub_object(HardwareI2C*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, charger.o(.text._ZN7ChargerC2EP11HardwareI2C), UNUSED)

<P><STRONG><a name="[18f]"></a>Fuelgauge::Fuelgauge(HardwareI2C*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fuelgauge.o(.text._ZN9FuelgaugeC2EP11HardwareI2C))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[238]"></a>Fuelgauge::Fuelgauge__sub_object(HardwareI2C*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fuelgauge.o(.text._ZN9FuelgaugeC2EP11HardwareI2C), UNUSED)

<P><STRONG><a name="[188]"></a>IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printable::Printable__sub_object()
</UL>

<P><STRONG><a name="[18d]"></a>IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[189]"></a>Printable::Printable__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipaddress.o(.text._ZN9PrintableC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[110]"></a>pin_info_t::bit_mask() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_1.o(.text._ZNK10pin_info_t8bit_maskEv))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[1b0]"></a>pin_adc_info_t::get_device() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wiring_analog.o(.text._ZNK14pin_adc_info_t10get_deviceEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[c5]"></a>IPAddress::printTo(Print&) const</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ipaddress.o(.text._ZNK9IPAddress7printToER5Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IPAddress::printTo(Print&) const &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.rodata._ZTV9IPAddress)
</UL>
<P><STRONG><a name="[175]"></a>operator delete[](void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.o(.text._ZdaPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>

<P><STRONG><a name="[148]"></a>operator delete(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::~Usart()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[172]"></a>operator new[](unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.o(.text._Znaj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[145]"></a>operator new(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart(usart_config_t*, short, short, unsigned int, unsigned int)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
</UL>

<P><STRONG><a name="[b7]"></a>__cxa_pure_virtual</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abi.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>
<BR>[Address Reference Count : 4]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> usart_1.o(.rodata._ZTV14HardwareSerial)
<LI> usart_1.o(.rodata._ZTV6Stream)
<LI> ipaddress.o(.rodata._ZTV9Printable)
</UL>
<P><STRONG><a name="[184]"></a>yield</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, yield.o(.text.__empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yield
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::write(unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::flush()
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_ffs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[190]"></a>_irqn_aa_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, irqn.o(.text._irqn_aa_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _irqn_aa_get &rArr; irqn_bitfield_next(unsigned int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_index_to_irqn(unsigned int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_next(unsigned int&)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
</UL>

<P><STRONG><a name="[193]"></a>_irqn_aa_resign</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, irqn.o(.text._irqn_aa_resign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _irqn_aa_resign &rArr; irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_to_bitfield_index(IRQn)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_resign
</UL>

<P><STRONG><a name="[1a2]"></a>adc_device_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, adc.o(.text.adc_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = adc_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1a3]"></a>adc_disable_channel</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, adc.o(.text.adc_disable_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = adc_disable_channel &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_to_mask(adc_device_t const*, unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1a5]"></a>adc_enable_channel</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, adc.o(.text.adc_enable_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adc_enable_channel &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_to_mask(adc_device_t const*, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1a9]"></a>core_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board.o(.text.core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = core_init &rArr; check_resetCause &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTick_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_resetCause
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[152]"></a>enIrqRegistration</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hc32f460_interrupts.o(.text.enIrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[14c]"></a>enIrqResign</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hc32f460_interrupts.o(.text.enIrqResign))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_resign(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[151]"></a>irqn_aa_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_1.o(.text.irqn_aa_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[14d]"></a>irqn_aa_resign</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_1.o(.text.irqn_aa_resign))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = irqn_aa_resign &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_resign
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_resign(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[1ab]"></a>$Super$$main</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[b5]"></a>main_thread_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[1ac]"></a>pinMode</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, wiring_digital.o(.text.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pinMode &rArr; timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_adc_info_t::get_device() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_get_assignment(short, timera_config_t*&, en_timera_channel&, en_port_func&)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b4]"></a>rt_application_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[199]"></a>rt_assert_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[1be]"></a>rt_components_board_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1af]"></a>rt_components_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1b6]"></a>rt_enter_critical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1b7]"></a>rt_exit_critical</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1b9]"></a>rt_free</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, mem.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1bf]"></a>rt_heap_begin_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(.text.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c0]"></a>rt_heap_end_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1bd]"></a>rt_hw_board_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c2]"></a>rt_hw_console_output</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e4]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[198]"></a>rt_hw_stack_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[12e]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[130]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[147]"></a>rt_kprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_resign
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::begin(unsigned int, stc_usart_uart_init const*, bool)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::end()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_resetCause
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry(void*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_task(void*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_start(timera_config_t*, unsigned int, unsigned int, bool)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_set_channel_active_flag(timera_config_t*, en_timera_channel, bool)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_pwm_channel_start(timera_config_t*, en_timera_channel, bool)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timera_get_assignment(short, timera_config_t*&, en_timera_channel&, en_port_func&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[1cd]"></a>rt_malloc</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, mem.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[197]"></a>rt_memset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_memset &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1ce]"></a>rt_object_allocate</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1d2]"></a>rt_object_delete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1d4]"></a>rt_object_detach</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1cf]"></a>rt_object_get_information</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1d5]"></a>rt_object_get_type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[1d6]"></a>rt_object_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1d7]"></a>rt_object_is_systemobject</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1b8]"></a>rt_schedule</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>

<P><STRONG><a name="[1db]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[1dd]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1e0]"></a>rt_sem_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1bc]"></a>rt_sem_release</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1bb]"></a>rt_sem_take</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1e4]"></a>rt_show_version</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c3]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1d0]"></a>rt_strncpy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1c1]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, mem.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1e6]"></a>rt_system_scheduler_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e8]"></a>rt_system_scheduler_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1ea]"></a>rt_system_timer_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1fb]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1b5]"></a>rt_thread_create</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[b1]"></a>rt_thread_exit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[1ed]"></a>rt_thread_idle_excute</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1f0]"></a>rt_thread_idle_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1ad]"></a>rt_thread_init</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15c]"></a>rt_thread_mdelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry(void*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_task(void*)
</UL>

<P><STRONG><a name="[1c6]"></a>rt_thread_resume</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[1c4]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[1f2]"></a>rt_thread_sleep</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1ae]"></a>rt_thread_startup</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c8]"></a>rt_thread_suspend</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[b2]"></a>rt_thread_timeout</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[15a]"></a>rt_thread_yield</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_task(void*)
</UL>

<P><STRONG><a name="[1f1]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1f7]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[12f]"></a>rt_tick_increase</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>rt_timer_check</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1e2]"></a>rt_timer_control</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[1eb]"></a>rt_timer_detach</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[19a]"></a>rt_timer_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1e3]"></a>rt_timer_start</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[1f4]"></a>rt_timer_stop</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[1cc]"></a>rt_vsnprintf</STRONG> (Thumb, 782 bytes, Stack size 64 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[fa]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[239]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[23a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b4]"></a>i2c_slave_task(void*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text._ZL14i2c_slave_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = i2c_slave_task(void*) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Receive_IT(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[15d]"></a>Slave_Initialize()</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, main.o(.text._ZL16Slave_Initializev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Slave_Initialize() &rArr; I2C_Init &rArr; I2C_BaudrateConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveAdr0Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[160]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text._ZL16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[b3]"></a>led_thread_entry(void*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text._ZL16led_thread_entryPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = led_thread_entry(void*) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[15f]"></a>__NVIC_SetPriority(IRQn, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[15b]"></a>I2C_Slave_Receive_IT(unsigned char*, unsigned int)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text._ZL20I2C_Slave_Receive_ITPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Slave_Receive_IT(unsigned char*, unsigned int) &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_task(void*)
</UL>

<P><STRONG><a name="[15e]"></a>__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text._ZL22__NVIC_ClearPendingIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Initialize()
</UL>

<P><STRONG><a name="[141]"></a>BufRead()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(.text._ZL7BufReadv))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TEI_Callback()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EEI_Callback()
</UL>

<P><STRONG><a name="[142]"></a>BufWrite(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text._ZL8BufWriteh))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RXI_Callback()
</UL>

<P><STRONG><a name="[128]"></a>SysClkConfig</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, board.o(.text.SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysClkConfig &rArr; CLK_SysClkConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>

<P><STRONG><a name="[12c]"></a>SysTick_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, board.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTick_Init
</UL>

<P><STRONG><a name="[12d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[1a6]"></a>check_resetCause</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, board.o(.text.check_resetCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_resetCause &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_GetResetCause
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_ClrResetFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>

<P><STRONG><a name="[1aa]"></a>sysTick_Init</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, board.o(.text.sysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysTick_Init &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>

<P><STRONG><a name="[ca]"></a>_GLOBAL__sub_I_Key.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key.o(.text._GLOBAL__sub_I_Key.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GLOBAL__sub_I_Key.cpp &rArr; __cxx_global_var_init &rArr; EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.init_array)
</UL>
<P><STRONG><a name="[13c]"></a>__cxx_global_var_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxx_global_var_init &rArr; EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Key.cpp
</UL>

<P><STRONG><a name="[cb]"></a>_GLOBAL__sub_I_Begin.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, begin.o(.text._GLOBAL__sub_I_Begin.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_Begin.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> begin.o(.init_array)
</UL>
<P><STRONG><a name="[138]"></a>__cxx_global_var_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, begin.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::HardwareI2C(M4_I2C_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Begin.cpp
</UL>

<P><STRONG><a name="[139]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, begin.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxx_global_var_init.1
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger::Charger(HardwareI2C*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Begin.cpp
</UL>

<P><STRONG><a name="[13a]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, begin.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxx_global_var_init.2
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuelgauge::Fuelgauge(HardwareI2C*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Begin.cpp
</UL>

<P><STRONG><a name="[cc]"></a>_GLOBAL__sub_I_Usart.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_1.o(.text._GLOBAL__sub_I_Usart.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_Usart.cpp &rArr; __cxx_global_var_init.2 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_1.o(.init_array)
</UL>
<P><STRONG><a name="[154]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_1.o(.text._ZL16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[14a]"></a>__NVIC_DisableIRQ(IRQn)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_1.o(.text._ZL17__NVIC_DisableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_resign(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[153]"></a>__NVIC_SetPriority(IRQn, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart_1.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[14b]"></a>__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_1.o(.text._ZL22__NVIC_ClearPendingIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_resign(usart_interrupt_config_t&, char const*)
</UL>

<P><STRONG><a name="[13d]"></a>__cxx_global_var_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart_1.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart__sub_object(usart_config_t*, short, short, unsigned int, unsigned int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Usart.cpp
</UL>

<P><STRONG><a name="[13e]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart_1.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init.1 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart__sub_object(usart_config_t*, short, short, unsigned int, unsigned int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Usart.cpp
</UL>

<P><STRONG><a name="[13f]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usart_1.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init.2 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart::Usart__sub_object(usart_config_t*, short, short, unsigned int, unsigned int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Usart.cpp
</UL>

<P><STRONG><a name="[161]"></a>USART_rx_error_irq(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart_config.o(.text._ZL18USART_rx_error_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_rx_error_irq(unsigned char) &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[1]"></a>void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)1&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[5]"></a>void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)2&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[9]"></a>void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)3&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[d]"></a>void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)4&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[163]"></a>USART_tx_complete_irq(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_config.o(.text._ZL21USART_tx_complete_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[3]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[7]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[b]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[f]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[164]"></a>USART_tx_buffer_empty_irq(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usart_config.o(.text._ZL25USART_tx_buffer_empty_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[2]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[6]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[a]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[e]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[166]"></a>USART_rx_data_available_irq(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usart_config.o(.text._ZL27USART_rx_data_available_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[0]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[4]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[8]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[c]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[cd]"></a>_GLOBAL__sub_I_IPAddress.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_IPAddress.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.init_array)
</UL>
<P><STRONG><a name="[13b]"></a>__cxx_global_var_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipaddress.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_IPAddress.cpp
</UL>

<P><STRONG><a name="[124]"></a>UsartGetClk</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, hc32f460_usart.o(.text.UsartGetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsartGetClk
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[c8]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[c7]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[c9]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[c6]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[1ee]"></a>_has_defunct_thread</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idle.o(.text._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1ef]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[b6]"></a>rt_thread_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = rt_thread_idle_entry &rArr;  rt_thread_idle_entry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1c5]"></a>rt_ipc_list_resume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ipc.o(.text.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1c7]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[1ca]"></a>rt_ipc_object_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ipc.o(.text.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[1cb]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1c9]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[1e1]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1b3]"></a>divide</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[1b2]"></a>print_number</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1fa]"></a>skip_atoi</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1b1]"></a>plug_holes</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1d1]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1d3]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1e7]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[1dc]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[1df]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[1de]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[195]"></a>_rt_thread_init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, thread.o(.text._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[19f]"></a>_thread_cleanup_execute</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, thread.o(.text._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[196]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1ec]"></a>rt_list_insert_after</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, thread.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1f5]"></a>rt_list_insert_before</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1f3]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[19b]"></a>_rt_timer_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(.text._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[19d]"></a>_rt_timer_remove</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[19c]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[1f9]"></a>rt_list_insert_after</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1f8]"></a>rt_list_isempty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[19e]"></a>rt_list_remove</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[178]"></a>getPinIndex(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, hardwarei2c.o(.text._ZL11getPinIndexh))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::configPins()
</UL>

<P><STRONG><a name="[179]"></a>getI2CPinFunc(M4_I2C_TypeDef*, bool)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardwarei2c.o(.text._ZL13getI2CPinFuncP14M4_I2C_TypeDefb))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::configPins()
</UL>

<P><STRONG><a name="[177]"></a>getPortInstance(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardwarei2c.o(.text._ZL15getPortInstanceh))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2C::configPins()
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
